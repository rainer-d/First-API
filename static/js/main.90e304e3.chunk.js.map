{"version":3,"sources":["components/SearchForm.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchForm","latLocal","longLocal","altLocal","numPass","buttonClick","className","type","placeholder","onChange","id","onClick","Card","pass","duration","risetime","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","convDate","convTime","substr","CardList","passData","map","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchClick","SearchStarted","newSearch","setLat","latInput","localLat","target","value","setLong","longInput","localLong","setAlt","altInput","localAlt","setNum","numInput","numberPass","Mounted","results","calRes","targetUrl","fetch","then","blob","json","data","JSON","stringify","console","log","errorMsg","message","document","getElementById","innerHTML","reason","NaN","response","catch","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90e304e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchForm = ({latLocal, longLocal, altLocal, numPass, buttonClick}) => {\r\n\treturn (\r\n\t\t<div className='pa2 ba br2 b--orange bg-moon-gray'>\r\n\t\t\t<p>Please enter your position and the number of passes you want to see. (* Required)</p>\r\n\t\t\t<input  \r\n\t\t\t\tclassName='pa1 tc ba b--black'\t\t\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='*Latitude (degrees)'\r\n\t\t\t\tonChange={latLocal}\r\n\t\t\t/>\r\n\t\t\t<input  \r\n\t\t\t\tclassName='pa1 tc ba b--black'\t\t\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='*Longitude (degrees)'\r\n\t\t\t\tonChange={longLocal}\r\n\t\t\t/>\r\n\t\t\t<input  \r\n\t\t\t\tclassName='pa1 tc ba b--black'\t\t\r\n\t\t\t\ttype='number' \r\n\t\t\t\tplaceholder='Altitude (metres)'\r\n\t\t\t\tonChange={altLocal}\r\n\t\t\t/>\r\n\t\t\t<input  \r\n\t\t\t\tclassName='pa1 tc ba b--black'\t\t\r\n\t\t\t\ttype='number' \r\n\t\t\t\tplaceholder='Number of passes'\r\n\t\t\t\tonChange={numPass}\r\n\t\t\t/>\r\n\t\t\t<br></br>\r\n\t\t\t<div id='inputError' className='red'></div>\r\n\t\t\t<br></br>\r\n\t\t\t<button  \r\n\t\t\t\tclassName='pa1 tc b--blue'\t\t \r\n\t\t\t\tonClick={buttonClick}>\r\n\t\t\t\tSEARCH\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\r\n\r\nconst Card = ({ pass, duration, risetime }) => {\r\n\t// Months array\r\n\t var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n\r\n\t // Convert timestamp to milliseconds\r\n\t var date = new Date(risetime*1000);\r\n\r\n\t // Year\r\n\t var year = date.getFullYear();\r\n\r\n\t // Month\r\n\t var month = months_arr[date.getMonth()];\r\n\r\n\t // Day\r\n\t var day = date.getDate();\r\n\r\n\t // Hours\r\n\t var hours = date.getHours();\r\n\r\n\t // Minutes\r\n\t var minutes = \"0\" + date.getMinutes();\r\n\r\n\t // Seconds\r\n\t var seconds = \"0\" + date.getSeconds();\r\n\r\n\t // Display date in MM-dd-yyyy h:m:s format\r\n\t var convDate = month+'-'+day+'-'+year;\r\n\t // and time in h:m:s format\r\n\t var convTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n \r\n\treturn (\r\n\t\t<div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<div>\r\n\t\t\t   <h2>Pass: {pass}</h2>\r\n\t\t\t   <p>Date: {convDate}</p>\r\n\t\t\t   <p>Rise Time: {convTime}</p>\r\n\t\t\t   <p>Duration: {duration} seconds</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ passData }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tpassData.map((pass, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\t\t\t\t\t\t \r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tpass={i+1}\r\n\t\t\t\t\t\tduration={passData[i].duration} \r\n\t\t\t\t\t\trisetime={passData[i].risetime}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll',  border: '1px solid black', height: '500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. Refresh the page and try again.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchForm from '../components/SearchForm';\nimport CardList from '../components/CardList'; \nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      Mounted: 0,\n      SearchStarted: 0,\n      results: [],\n      localLat: \"\",\n      localLong: \"\",\n      localAlt: 1,\n      numberPass: 1,\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ Mounted: 1 })\n  }\n\n  newSearch() {\n    var { localLat, localLong, localAlt, numberPass } = this.state;\n    var calRes = {};\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = `http://api.open-notify.org/iss-pass.json?lat=${localLat}&lon=${localLong}&alt=${localAlt}&n=${numberPass}`\n    fetch(proxyUrl + targetUrl)\n      .then(blob => blob.json())\n      .then(data => {\n  \n      calRes = JSON.stringify(data, null, 2);\n\n      console.log(\"API return: \" + calRes)\n\n      var errorMsg = (data.message === \"failure\") ? \n      (document.getElementById('inputError').innerHTML=data.reason, this.setState({ results: [{duration: 0, risetime:NaN}] })) : (\n        document.getElementById('inputError').innerHTML=\"\",\n        this.setState({ results: data.response })\n        );\n      console.log(errorMsg);\n      return data;\n      })\n      .catch(e => {\n      console.log(\"Catch: \" + e);\n      return e;\n      });\n    }\n\n  onSearchClick = () => {\n    this.setState({ SearchStarted: 1 });\n    this.newSearch();\n  }  \n\n  setLat = (latInput) => {\n    this.setState({ localLat: latInput.target.value });\n  }\n\n  setLong = (longInput) => {\n    this.setState({ localLong: longInput.target.value });\n  }\n\n  setAlt = (altInput) => {\n    this.setState({ localAlt: altInput.target.value });\n  }\n\n  setNum = (numInput) => {\n    this.setState({ numberPass: numInput.target.value });\n  }\n\n  render() {\n    const { results, Mounted } = this.state;\n     // const passResults = results.map(pass =>{\n     //   return pass\n     // })\n    return !Mounted ?\n    <h1 className='tc'>Loading...</h1> :\n    (\n      <div className='tc'>\n        <div className=\"App-header\">\n          <h1 className='f2'>- - - ISS PASS TIMES - - -</h1>\n            \n        </div>     \n        <SearchForm latLocal={this.setLat} longLocal={this.setLong} altLocal={this.setAlt} numPass={this.setNum} buttonClick={this.onSearchClick} />   \n        <Scroll>\n          <ErrorBoundry>\n              <CardList passData={results} />\n          </ErrorBoundry>\n        </Scroll>      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}